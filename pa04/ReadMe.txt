/////////////////////////////////////////////////////////////
<<<<<<< HEAD
# Mengjie Li   
# mli55@ucsc.edu
# CMPS 101 Spring 2015 - Intro to Algorithm
# pa04 
=======
# pa03 
>>>>>>> 087727c9e1b076c09f8dcd0afe4bcb7f8b9fc11f
/////////////////////////////////////////////////////////////


Purpose:

<<<<<<< HEAD
The purpose of this assginment is to implement prim MST algorithm and 
Dijkstra SSSP algorithm.
=======
The purpose of this assginment is to implement SCC algorithm.
>>>>>>> 087727c9e1b076c09f8dcd0afe4bcb7f8b9fc11f


files:

<<<<<<< HEAD
graph04.c
edgeList.h
edgeList.c
loadWgtGraph.h
loadWgtGraph.c
minPQ.h
minPQ.c
greedyTree.h
greedyTree.c
Makefile
testFiles 

In graph04.c, the main function is used to call diferent functions to 
complete these two algorithms.
=======
scc03.c
intList.h
intList.c
loadGraph.h
loadGraph.c
ftStack.h
ftStack.c
dfsTrace1.h
dfsTrace1.c
dfsPhase2.h
dfsPhase2.c
Makefile
testFiles 

In scc03.c, the main function is used to call diferent functions to 
complete the scc algorithm.
>>>>>>> 087727c9e1b076c09f8dcd0afe4bcb7f8b9fc11f
1.open a input file
2.read and parse the file 
3.build the graph 
4.print graph
<<<<<<< HEAD
5.implement these two algorithms
7.print out the result

edgeList.c defines ADT's member functions such as edgeFirst, edgeRest and
edgeCons.
edgeList.h remains the same according to the requirement.

In loadWgtGraph.h and loadWgtGraph.c, functions such as parseN, initEdges, 
loadEdges, printGraph are declared and defined to build the graph
according to the input file.

In minPQ.h and minPQ.c, ADT priority queue is declared and defined for 
implementation of our greedy algorithms.

In greedyTree.h and greedyTree.c, functions for implementation of greedy 
algorithms are defined. Functions initStatus, initFringeWgt and initParent, 
arrays are initialized for saving the data. Function printArrays can be
used to debug or print out the results. Function calcPriority is used to
calculate the priority in different ways depending on the argument 'task'.
Functions greedyTree and updateFringe are derived from the skeleton given
in our text book. They are modified a little bit to accomplish that it 
can implement two algorithms with one function.
=======
5.SCC phase 1
6.transpose graph
7.SCC phase 2

intList.c defines ADT's member functions such as intFirst, intRest and intCons.
intList.h remains the same according to the requirement.

In loadGraph.h and loadGraph.c, functions such as parseN, initEdges, 
loadEdges, printGraph, transposeGraph, hasCycle and hasCycleLen are 
declared and defined to build the graph according to the input file.

In ftStack.h and ftStack.c, stack functions such as initStk, isEmptyStk,
printStk, pushStk, topStk and popStk are use to manipulate the finish time
stack, an ADT created to store the finish time.

In dfsTrace1.h and dfsTrace1.c, functions are defined and declared to 
accomplish the first phase of scc algorithm. 
initColor(int), initDiscoverTime(int), initFinishTime(int) and
initParent(int) are used to initialize those arrays will be used in DFS.
Then call dfsSweep1 and dfsTrace1 to finish the DFS, fill the related 
arrays and push those vertices into stack based on their finish time.
The dfsSweep1 will return the finishStack for next scc phase.

In dfsPhase2.h and dfsPhase2.c, functions are declared and defined to 
accomplish the second phase of scc algorithm. 
initDfstRoot function is used to record the leaders of each scc.
Call dfsTsweep2 and dfsT2 to accomplish DFS according to the order in 
finish time stack and fill corresponding arrays.




>>>>>>> 087727c9e1b076c09f8dcd0afe4bcb7f8b9fc11f


compile:

<<<<<<< HEAD
make 
=======
make scc03 
>>>>>>> 087727c9e1b076c09f8dcd0afe4bcb7f8b9fc11f

The Makefile is modified. So all object files and binary files we need
can be generated by this simple command.


usage:

<<<<<<< HEAD
./graph04 -P 1 primTest.in
          or
./graph04 -D 1 dijkstraTest.in
=======
./scc03 testfile

>>>>>>> 087727c9e1b076c09f8dcd0afe4bcb7f8b9fc11f


test files:

<<<<<<< HEAD
There are 2 test files. primTest.in is an undirected graph, and 
dijkstraTest.in is a directed graph. These two graphs are given as examples
in class.
=======
There are 3 test files in testFiles directory. test.in is the given sample 
file. g711.in and g724.in are input files I made according to the graphs
7.11 and 7.24 in the textbook. 
>>>>>>> 087727c9e1b076c09f8dcd0afe4bcb7f8b9fc11f

